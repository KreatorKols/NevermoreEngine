"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13303],{9817:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new ObservableMap","params":[],"returns":[{"desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"function_type":"static","source":{"line":68,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"isObservableMap","desc":"Returns whether the set is an observable map","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":90,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"__iter","desc":"Allows iteration over the observable map","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"(T) -> ((T, nextIndex: any) -> ...any, T?)"}],"function_type":"static","source":{"line":99,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveKeysBrio","desc":"Observes all keys in the map","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"Observable<Brio<TKey>>"}],"function_type":"static","source":{"line":107,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveValuesBrio","desc":"Observes all keys in the map","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"Observable<Brio<TKey>>"}],"function_type":"static","source":{"line":117,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObservePairsBrio","desc":"Observes all keys in the map","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>\\n"}],"returns":[{"desc":"","lua_type":"Observable<Brio<(TKey, TValue)>>"}],"function_type":"static","source":{"line":127,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"Get","desc":"Returns the value for the given key","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"TValue"}],"function_type":"static","source":{"line":174,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ContainsKey","desc":"Returns whether the map contains the key","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":185,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"GetCount","desc":"Gets the count of items in the set","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":195,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveCount","desc":"Observes the count of the set","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"static","source":{"line":206,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveAtKeyBrio","desc":"Observes the value for the given key.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"Observable<Brio<TValue>>"}],"function_type":"static","source":{"line":216,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveAtKey","desc":"Observes the value for the given key.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"Observable<TValue?>"}],"function_type":"static","source":{"line":235,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveValueForKey","desc":"Observes the value for the given key. Alias for [ObservableMap.ObserveAtKey].","params":[{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"Observable<TValue?>"}],"function_type":"static","source":{"line":251,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"Set","desc":"Adds the item to the set if it does not exists.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"},{"name":"value","desc":"","lua_type":"TValue?"}],"returns":[{"desc":"Call to remove the value if it was added","lua_type":"callback"}],"function_type":"static","source":{"line":259,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"Remove","desc":"Removes the item from the map if it exists.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"},{"name":"key","desc":"","lua_type":"TKey"}],"returns":[],"function_type":"static","source":{"line":300,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"GetValueList","desc":"Gets a list of all values.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"{ TValue }"}],"function_type":"static","source":{"line":310,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"GetKeyList","desc":"Gets a list of all keys.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"{ TKey }"}],"function_type":"static","source":{"line":322,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"ObserveKeyList","desc":"Observes the list of all keys.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[{"desc":"","lua_type":"Observable<{ TKey }>"}],"function_type":"static","source":{"line":334,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}},{"name":"Destroy","desc":"Cleans up the ObservableMap and sets the metatable to nil.","params":[{"name":"self","desc":"","lua_type":"ObservableMap<TKey, TValue>"}],"returns":[],"function_type":"static","source":{"line":366,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}}],"properties":[{"name":"CountChanged","desc":"Fires when the count changes.","lua_type":"RBXScriptSignal","source":{"line":67,"path":"src/observablecollection/src/Shared/ObservableMapSet.lua"}}],"types":[],"name":"ObservableMap","desc":"A list that can be observed for blend and other components","source":{"line":6,"path":"src/observablecollection/src/Shared/ObservableMap.lua"}}')}}]);