"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[67524],{68601:e=>{e.exports=JSON.parse('{"functions":[{"name":"IterateNodesRange","desc":"Inclusive iterator like string.sub. Faster than skipping because we\\nbinary search our initial node","params":[{"name":"self","desc":"","lua_type":"SortedNode<T>"},{"name":"start","desc":"","lua_type":"number"},{"name":"finish","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"(T) -> ((T, nextIndex: any) -> ...any, T?)"}],"function_type":"static","source":{"line":113,"path":"src/observablecollection/src/Shared/SortedList/SortedNode.lua"}},{"name":"ContainsNode","desc":"Returns true if the node is contained within the parent node","params":[{"name":"self","desc":"","lua_type":"SortedNode<T>"},{"name":"node","desc":"","lua_type":"SortedNode<T>"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":286,"path":"src/observablecollection/src/Shared/SortedList/SortedNode.lua"}}],"properties":[],"types":[],"name":"SortedNode","desc":"Used by [ObservableSortedList] to maintain a red-black binary search tree.","source":{"line":7,"path":"src/observablecollection/src/Shared/SortedList/SortedNode.lua"}}')}}]);