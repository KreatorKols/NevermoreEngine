"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[89734],{59861:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new aggregator that aggregates promised results together","params":[{"name":"debugName","desc":"","lua_type":"string"},{"name":"promiseBulkQuery","desc":"","lua_type":"({ number }) -> Promise<T>"}],"returns":[{"desc":"","lua_type":"Aggregator<T>"}],"function_type":"static","source":{"line":42,"path":"src/aggregator/src/Shared/Aggregator.lua"}},{"name":"SetMaxBatchSize","desc":"Sets the max batch size","params":[{"name":"self","desc":"","lua_type":"Aggregator<T>"},{"name":"maxBatchSize","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":63,"path":"src/aggregator/src/Shared/Aggregator.lua"}},{"name":"Promise","desc":"","params":[{"name":"self","desc":"","lua_type":"Aggregator<T>"},{"name":"id","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":74,"path":"src/aggregator/src/Shared/Aggregator.lua"}},{"name":"Observe","desc":"Observes the aggregated data","params":[{"name":"self","desc":"","lua_type":"Aggregator<T>"},{"name":"id","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"static","source":{"line":99,"path":"src/aggregator/src/Shared/Aggregator.lua"}}],"properties":[],"types":[],"name":"Aggregator","desc":"Aggregates all requests into one big send request to deduplicate the request","source":{"line":7,"path":"src/aggregator/src/Shared/Aggregator.lua"}}')}}]);