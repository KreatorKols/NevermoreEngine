"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[45016],{73024:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"servicebag","title":"Using Services","description":"Services in Nevermore use ServiceBag and need to be","source":"@site/docs/servicebag.md","sourceDirName":".","slug":"/servicebag","permalink":"/NevermoreEngine/docs/servicebag","draft":false,"unlisted":false,"editUrl":"https://github.com/Quenty/NevermoreEngine/edit/main/docs/servicebag.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Using Services","sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Install","permalink":"/NevermoreEngine/docs/install"},"next":{"title":"Design","permalink":"/NevermoreEngine/docs/design"}}');var t=n(74848),s=n(28453);const a={title:"Using Services",sidebar_position:3},c="Using services in Nevermore",o={},l=[{value:"tl;dr",id:"tldr",level:2},{value:"What is a service?",id:"what-is-a-service",level:2},{value:"Service lifecycle methods",id:"service-lifecycle-methods",level:2},{value:"<code>ServiceBag:Init(serviceBag)</code>",id:"servicebaginitservicebag",level:3},{value:"<code>ServiceBag:Start()</code>",id:"servicebagstart",level:3},{value:"<code>ServiceBag:Destroy()</code>",id:"servicebagdestroy",level:3},{value:"How do I retrieve services?",id:"how-do-i-retrieve-services",level:2},{value:"Extras",id:"extras",level:2},{value:"Why is understanding ServiceBag is important?",id:"why-is-understanding-servicebag-is-important",level:3},{value:"Is ServiceBag good?",id:"is-servicebag-good",level:3},{value:"What ServiceBag tries to achieve",id:"what-servicebag-tries-to-achieve",level:3},{value:"Why can&#39;t you pass in arguments into ()",id:"why-cant-you-pass-in-arguments-into-",level:3},{value:"How do you configure a service instead of arguments?",id:"how-do-you-configure-a-service-instead-of-arguments",level:3},{value:"Should services have side effects when initialized or started?",id:"should-services-have-side-effects-when-initialized-or-started",level:3},{value:"Dependency injection",id:"dependency-injection",level:2},{value:"Dependency injection in objects",id:"dependency-injection-in-objects",level:3},{value:"Dependency injection in binders",id:"dependency-injection-in-binders",level:3},{value:"Memory management - ServiceBag will annotate stuff for you",id:"memory-management---servicebag-will-annotate-stuff-for-you",level:3},{value:"Using ServiceBag with stuff that doesn&#39;t have access to ServiceBag",id:"using-servicebag-with-stuff-that-doesnt-have-access-to-servicebag",level:3}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"using-services-in-nevermore",children:"Using services in Nevermore"})}),"\n",(0,t.jsxs)(i.p,{children:["Services in Nevermore use ",(0,t.jsx)(i.a,{href:"/api/ServiceBag/",children:"ServiceBag"})," and need to be\nrequired through them. ServiceBag provides services and helps with game or\nplugin initialization, and is like a ",(0,t.jsx)(i.code,{children:"game"})," in Roblox. You can retrieve\nservices from it, and it will ensure the service exists and is initialized.\nThis will bootstrap any other dependent dependencies."]}),"\n",(0,t.jsx)(i.h2,{id:"tldr",children:"tl;dr"}),"\n",(0,t.jsxs)(i.p,{children:["Nevermore services are initialized and required with\n",(0,t.jsx)(i.a,{href:"/api/ServiceBag/",children:"ServiceBag"}),". This document explains what you need to know,\nbut here are the key points:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You will not be able to use services as expected if they are not required\nthrough the ServiceBag that initializes them."}),"\n",(0,t.jsx)(i.li,{children:"Your services cannot yield the main thread."}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"what-is-a-service",children:"What is a service?"}),"\n",(0,t.jsx)(i.p,{children:"A service is a singleton, that is, a module of which exactly one exists. This\nis oftentimes very useful, especially in de-duplicating behavior. Services are\nactually something you should be familiar with on Roblox, if you've been\nprogramming on Roblox for a while."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'-- Workspace is an example of a service in Roblox\nlocal workspace = game:GetService("Workspace")\n'})}),"\n",(0,t.jsxs)(i.p,{children:["It's useful to define our own services. A canonical service in Nevermore looks\nlike this. Note the ",(0,t.jsx)(i.code,{children:"Init"}),", ",(0,t.jsx)(i.code,{children:"Start"}),", and ",(0,t.jsx)(i.code,{children:"Destroy"})," methods:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'--[=[\n\tA canonical service in Nevermore\n\t@class ServiceName\n]=]\n\nlocal require = require(script.Parent.loader).load(script)\n\nlocal Maid = require("Maid")\n\nlocal ServiceName = {}\nServiceName.ServiceName = "ServiceName"\n\nfunction ServiceName:Init(serviceBag)\n\tassert(not self._serviceBag, "Already initialized")\n\tself._serviceBag = assert(serviceBag, "No serviceBag")\n\tself._maid = Maid.new()\n\n\t-- External\n\tself._serviceBag:GetService(require("OtherService"))\nend\n\nfunction ServiceName:Start()\n\tprint("Started")\nend\n\nfunction ServiceName:MyMethod()\n\tprint("Hello")\nend\n\nfunction ServiceName:Destroy()\n\tself._maid:DoCleaning()\nend\n\nreturn ServiceName\n'})}),"\n",(0,t.jsx)(i.h2,{id:"service-lifecycle-methods",children:"Service lifecycle methods"}),"\n",(0,t.jsxs)(i.p,{children:["There are 3 methods in a service that are precoded in a ",(0,t.jsx)(i.code,{children:"ServiceBag"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["All three of these services are optional. However, if you want to have services\nbootstrapped that this service depends upon, then you should do this in ",(0,t.jsx)(i.code,{children:"Init"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"servicebaginitservicebag",children:(0,t.jsx)(i.code,{children:"ServiceBag:Init(serviceBag)"})}),"\n",(0,t.jsx)(i.p,{children:"Initializes the service. Cannot yield. If any more services need to be\ninitialized then this should also get those services at this time."}),"\n",(0,t.jsxs)(i.p,{children:["When ",(0,t.jsx)(i.code,{children:"ServiceBag:Init()"})," is called, ServiceBag will call ",(0,t.jsx)(i.code,{children:":Init()"})," on any service\nthat has been retrieved. If any of these services retrieve additional services\nthen these will also be initialized and stored in the ServiceBag. Notably\nServiceBag will not use the direct memory of the service, but instead create a\nnew table and store the state in the ServiceBag itself."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsx)(i.p,{children:"If you're using the Nevermore CLI to generate your project structure, you will\nnotice something similar in the ClientMain and ServerMain scripts."})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"local serviceBag = ServiceBag.new()\nserviceBag:GetService(packages.MyModuleScript)\n\nserviceBag:Init()\nserviceBag:Start()\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"warning",children:(0,t.jsxs)(i.p,{children:["An important detail of ServiceBag is that it does not allow your services to\nyield in the ",(0,t.jsx)(i.code,{children:":Init()"})," methods. This is to prevent a service from delaying your\nentires game start. If you need to yield, do work in ",(0,t.jsx)(i.code,{children:":Start()"})," or export your\nAPI calls as promises. See ",(0,t.jsx)(i.a,{href:"/api/CmdrService/",children:"Cmdr"})," for a good example of how\nthis works."]})}),"\n",(0,t.jsxs)(i.p,{children:["Retrieving a service from inside of ",(0,t.jsx)(i.code,{children:":Init()"})," that service is guaranteed to be\ninitialized. Services are started in the order they're initialized."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'function MyService:Init(serviceBag)\n\tself._myOtherService = serviceBag:GetService(require("MyOtherService"))\n\n\t-- Services are guaranteed to be initialized if you retrieve them in an\n\t-- init of another service, assuming that :Init() is done via ServiceBag.\n\tself._myOtherService:Register(self)\nend\n'})}),"\n",(0,t.jsx)(i.p,{children:"When init is over, no more services can be added to the ServiceBag."}),"\n",(0,t.jsx)(i.h3,{id:"servicebagstart",children:(0,t.jsx)(i.code,{children:"ServiceBag:Start()"})}),"\n",(0,t.jsx)(i.p,{children:"Called when the game starts. Cannot yield. Starts actual behavior, including\nlogic that depends on other services."}),"\n",(0,t.jsxs)(i.p,{children:["When Start happens the ServiceBag will go through each of its services\nthat have been initialized and attempt to call the ",(0,t.jsx)(i.code,{children:":Start()"})," method on it\nif it exists."]}),"\n",(0,t.jsxs)(i.p,{children:["This is a good place to use other services that you may have needed as they\nare guaranteed to be initialized. However, you can also typically assume\ninitialization is done in the ",(0,t.jsx)(i.code,{children:":Init()"})," method. However, sometimes you may\nassume initialization but no start."]}),"\n",(0,t.jsx)(i.h3,{id:"servicebagdestroy",children:(0,t.jsx)(i.code,{children:"ServiceBag:Destroy()"})}),"\n",(0,t.jsx)(i.p,{children:"Cleans up the existing service."}),"\n",(0,t.jsxs)(i.p,{children:["When ",":Destroy","() is called, all services are destroyed. The ServiceBag will call\n",(0,t.jsx)(i.code,{children:":Destroy()"})," on services if they offer it. This functionality is useful if\nyou're initializing services during Hoarcekat stories or unit tests."]}),"\n",(0,t.jsx)(i.h2,{id:"how-do-i-retrieve-services",children:"How do I retrieve services?"}),"\n",(0,t.jsxs)(i.p,{children:["You can retrieve a service by calling ",(0,t.jsx)(i.code,{children:"GetService"}),". ",(0,t.jsx)(i.code,{children:"GetService"})," takes in a\ntable. If you pass it a module script, the ServiceBag will require the module\nscript and use the resulting definition as the service definition."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"local serviceBag = ServiceBag.new()\n\nlocal myService = serviceBag:GetService(packages.MyModuleScript)\n\nserviceBag:Init()\nserviceBag:Start()\n"})}),"\n",(0,t.jsxs)(i.p,{children:["As soon as you retrieve the service you should be able to call methods on it.\nYou may want to call ",(0,t.jsx)(i.code,{children:":Init()"})," or ",(0,t.jsx)(i.code,{children:":Start()"})," before using methods on the service,\nbecause the state of the service will be whatever it is before Init or Start."]}),"\n",(0,t.jsx)(i.p,{children:"To retrieve services in other services, you can do something similar to what is\nprovided in the canonical service example. Take a look at this example service:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'function OtherService:Init()\n\tself._value = "foo"\nend\n\nfunction OtherService:GetSomeValue()\n\treturn self._value\nend\n'})}),"\n",(0,t.jsxs)(i.p,{children:["If you wanted to call the ",(0,t.jsx)(i.code,{children:"GetSomeValue"})," method from another service, you would do\nsomething like this:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'local OtherService = require("OtherService")\n\nfunction ServiceName:Init(serviceBag)\n\tassert(not self._serviceBag, "Already initialized")\n\n\tself._serviceBag = assert(serviceBag, "No serviceBag")\n\tself._otherService = self._serviceBag:GetService(OtherService)\n\n\t-- If you try to use the method on a service without requiring it through\n\t-- the ServiceBag, it might not behave as expected. For example:\n\tprint(OtherService:GetSomeValue()) --\x3e nil\n\n\t-- However, once we retrieve the service through the ServiceBag, we can\n\t-- call methods on it:\n\tprint(self._otherService:GetSomeValue()) --\x3e "foo"\nend\n'})}),"\n",(0,t.jsx)(i.h2,{id:"extras",children:"Extras"}),"\n",(0,t.jsx)(i.h3,{id:"why-is-understanding-servicebag-is-important",children:"Why is understanding ServiceBag is important?"}),"\n",(0,t.jsx)(i.p,{children:"Nevermore tries to be a collection of libraries that can be plugged together,\nand not exist as a set framework that forces specific design decisions. While\nthere are certainly some design patterns these libraries will guide you to,\nyou shouldn't necessarily feel forced to operate within these set of\nscenarios."}),"\n",(0,t.jsxs)(i.p,{children:["That being said, in order to use certain services, like ",(0,t.jsx)(i.code,{children:"CmdrService"})," or\npermission service, you need to be familiar with ",(0,t.jsx)(i.code,{children:"ServiceBag"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"If you're making a game with Nevermore, serviceBag solves a wide variety\nof problems with the lifecycle of the game, and is fundamental to the fast\niteration cycle intended with Nevermore."}),"\n",(0,t.jsx)(i.p,{children:"Many prebuilt systems depend upon ServiceBag and expect to be initialized\nthrough ServiceBag."}),"\n",(0,t.jsx)(i.h3,{id:"is-servicebag-good",children:"Is ServiceBag good?"}),"\n",(0,t.jsx)(i.p,{children:"ServiceBag supports multiple production games. It allows for functionality that\nisn't otherwise available in traditional programming techniques in Roblox. More\nspecifically:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Your games initialization can be controlled specifically"}),"\n",(0,t.jsx)(i.li,{children:"Recursive initialization (transient dependencies) will not cause refactoring\nrequirements at higher level games. Lower-level packages can add additional\ndependencies without fear of breaking their downstream consumers."}),"\n",(0,t.jsx)(i.li,{children:"Life cycle management is maintained in a standardized way"}),"\n",(0,t.jsx)(i.li,{children:"You can technically have multiple copies of your service running at once. This\nis useful for plugins and stuff."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"While serviceBag isn't required to make a quality Roblox game, and may seem\nconfusing at first, ServiceBag or an equivalent lifecycle management system\nand dependency injection system is a really good idea."}),"\n",(0,t.jsx)(i.h3,{id:"what-servicebag-tries-to-achieve",children:"What ServiceBag tries to achieve"}),"\n",(0,t.jsx)(i.p,{children:"ServiceBag does service dependency injection and initialization. These words\nmay be unfamiliar with you. Dependency injection is the process of retrieving\ndependencies instead of constructing them in an object. Lifecycle management is\nthe process of managing the life of services, which often includes the game."}),"\n",(0,t.jsx)(i.p,{children:"For the most part, ServiceBag is interested in the initialization of services\nwithin your game, since most services will not deconstruct. This allows for\nservices that cross-depend upon each other, for example, if service A and\nservice B both need to know about each other, serviceBag will allow for this\nto happen. A traditional module script will not allow for a circular dependency\nin the same way."}),"\n",(0,t.jsx)(i.p,{children:"ServiceBag achieves circular dependency support by having a lifecycle hook\nsystem."}),"\n",(0,t.jsxs)(i.h3,{id:"why-cant-you-pass-in-arguments-into-",children:["Why can't you pass in arguments into ",":GetService","()"]}),"\n",(0,t.jsxs)(i.p,{children:["Service configuration is not offered in the retrieval of ",":GetService","() because\ninherently we don't want unstable or random behavior in our games. If we had\narguments in ServiceBag then you better hope that your initialization order\ngets to configure the first service first. Otherwise, if another package adds\na service in the future then you will have different behavior."]}),"\n",(0,t.jsx)(i.h3,{id:"how-do-you-configure-a-service-instead-of-arguments",children:"How do you configure a service instead of arguments?"}),"\n",(0,t.jsxs)(i.p,{children:["Typically, you can configure a service by calling a method after ",(0,t.jsx)(i.code,{children:":Init()"})," is\ncalled, or after ",(0,t.jsx)(i.code,{children:":Start()"})," is called."]}),"\n",(0,t.jsx)(i.h3,{id:"should-services-have-side-effects-when-initialized-or-started",children:"Should services have side effects when initialized or started?"}),"\n",(0,t.jsx)(i.p,{children:"Services should typically not have side effects when initialized or started."}),"\n",(0,t.jsx)(i.h2,{id:"dependency-injection",children:"Dependency injection"}),"\n",(0,t.jsx)(i.p,{children:"ServiceBag is also effectively a dependency injection system. In this system\nyou can of course, inject services into other services."}),"\n",(0,t.jsx)(i.p,{children:"For this reason, we inject the ServiceBag into the actual package itself."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'-- Service bag injection\nfunction CarCommandService:Init(serviceBag)\n\tself._serviceBag = assert(serviceBag, "No serviceBag")\n\n\tself._cmdrService = self._serviceBag:GetService(require("CmdrService"))\nend\n'})}),"\n",(0,t.jsx)(i.h3,{id:"dependency-injection-in-objects",children:"Dependency injection in objects"}),"\n",(0,t.jsx)(i.p,{children:"If you've got an object, it's typical you may need a service there"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'--[=[\n\t@class MyClass\n]=]\n\nlocal require = require(script.Parent.loader).load(script)\n\nlocal BaseObject = require("BaseObject")\n\nlocal MyClass = setmetatable({}, BaseObject)\nMyClass.ClassName = "MyClass"\nMyClass.__index = MyClass\n\nfunction MyClass.new(serviceBag)\n\tlocal self = setmetatable(BaseObject.new(), MyClass)\n\n\tself._serviceBag = assert(serviceBag, "No serviceBag")\n\tself._cameraStackService = self._serviceBag:GetService(require("CameraStackService"))\n\n\treturn self\nend\n\nreturn MyClass\n'})}),"\n",(0,t.jsx)(i.p,{children:"It's very common to pass or inject a service bag into the service"}),"\n",(0,t.jsx)(i.h3,{id:"dependency-injection-in-binders",children:"Dependency injection in binders"}),"\n",(0,t.jsx)(i.p,{children:"Binders explicitly support dependency injection. You can see that a\nBinderProvider here retrieves a ServiceBag (or any argument you want)\nand then the binder retrieves the extra argument."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'return BinderProvider.new(script.Name, function(self, serviceBag)\n\t-- ...\n\tself:Add(Binder.new("Ragdoll", require("RagdollClient"), serviceBag))\n\t-- ...\nend)\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Binders then will get the ",(0,t.jsx)(i.code,{children:"ServiceBag"})," as the second argument."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'function Ragdoll.new(humanoid, serviceBag)\n\tlocal self = setmetatable(BaseObject.new(humanoid), Ragdoll)\n\n\tself._serviceBag = assert(serviceBag, "No serviceBag")\n\t-- Use services here.\n\n\treturn self\nend\n'})}),"\n",(0,t.jsx)(i.h3,{id:"memory-management---servicebag-will-annotate-stuff-for-you",children:"Memory management - ServiceBag will annotate stuff for you"}),"\n",(0,t.jsx)(i.p,{children:"ServiceBag will automatically annotate your service with a memory profile name\nso that it is easy to track down which part of your codebase is using memory.\nThis fixes a standard issue with diagnosing memory in a single-script\narchitecture."}),"\n",(0,t.jsx)(i.h3,{id:"using-servicebag-with-stuff-that-doesnt-have-access-to-servicebag",children:"Using ServiceBag with stuff that doesn't have access to ServiceBag"}),"\n",(0,t.jsx)(i.p,{children:"If you're working with legacy code, or external code, you may not want to pass\nan initialized ServiceBag around. This will typically make the code less\ntestable, so take this with caution, but you can typically use a few helper\nmethods to return fully initialized services instead of having to retrieve them\nthrough the ServiceBag."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"local function getAnyModule(module)\n\tif serviceBag:HasService(module) then\n\t\treturn serviceBag:GetService(module)\n\telse\n\t\treturn module\n\tend\nend\n"})}),"\n",(0,t.jsx)(i.p,{children:"It's preferably your systems interop with ServiceBag directly as ServiceBag\nprovides more control, better testability, and more clarity on where things are\ncoming from."})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>c});var r=n(96540);const t={},s=r.createContext(t);function a(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);