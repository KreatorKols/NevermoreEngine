"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12819],{311:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new EncodedAttributeValue. If a defaultValue that is not nil\\nis defined, then this value will be set on the Roblox object.","params":[{"name":"object","desc":"","lua_type":"Instance"},{"name":"attributeName","desc":"","lua_type":"string"},{"name":"encode","desc":"","lua_type":"(TValue) -> T"},{"name":"decode","desc":"","lua_type":"(T) -> TValue"},{"name":"defaultValue","desc":"","lua_type":"T?"}],"returns":[{"desc":"","lua_type":"EncodedAttributeValue<T, TValue>"}],"function_type":"static","source":{"line":28,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}},{"name":"ObserveBrio","desc":"Handles observing the value conditionalli","params":[{"name":"condition","desc":"","lua_type":"function | nil"}],"returns":[{"desc":"","lua_type":"Observable<Brio<any>>"}],"function_type":"method","source":{"line":53,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}},{"name":"Observe","desc":"Observes an attribute on an instance.","params":[],"returns":[{"desc":"","lua_type":"Observable<any>"}],"function_type":"method","source":{"line":63,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}}],"properties":[{"name":"Value","desc":"The current property of the Attribute. Can be assigned to to write\\nthe attribute.","lua_type":"T","source":{"line":75,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}},{"name":"Changed","desc":"Signal that fires when the attribute changes","lua_type":"Signal<()>","readonly":true,"source":{"line":82,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}}],"types":[],"name":"EncodedAttributeValue","desc":"Allows access to an attribute like a ValueObject, but also encoded or decoded","source":{"line":6,"path":"src/attributeutils/src/Shared/EncodedAttributeValue.lua"}}')}}]);