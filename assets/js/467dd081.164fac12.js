"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[69153],{73471:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new InputModeType","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"typesAndInputModeTypes","desc":"","lua_type":"{ Enum.UserInputType | Enum.KeyCode | string | InputModeType }"}],"returns":[{"desc":"","lua_type":"InputMode"}],"function_type":"static","source":{"line":35,"path":"src/inputmode/src/Shared/InputModeType.lua"}},{"name":"isInputModeType","desc":"Returns true if a given value is an InputModeType","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":52,"path":"src/inputmode/src/Shared/InputModeType.lua"}},{"name":"IsValid","desc":"Checks the validity of the inputType","params":[{"name":"self","desc":"","lua_type":"InputModeType"},{"name":"inputType","desc":"","lua_type":"{ UserInputType | KeyCode | string }"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":61,"path":"src/inputmode/src/Shared/InputModeType.lua"}},{"name":"GetKeys","desc":"Returns all keys defining the input mode.","params":[{"name":"self","desc":"","lua_type":"InputModeType"}],"returns":[{"desc":"","lua_type":"{ UserInputType | KeyCode | string }"}],"function_type":"static","source":{"line":71,"path":"src/inputmode/src/Shared/InputModeType.lua"}}],"properties":[],"types":[],"name":"InputModeType","desc":"Type specification for input modes, which is static. Separated out from InputMode which is dynamic.","source":{"line":7,"path":"src/inputmode/src/Shared/InputModeType.lua"}}')}}]);