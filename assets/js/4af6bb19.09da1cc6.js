"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6204],{20145:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a ValueBaseValue object. This is a wrapper around the value base\\nunderneath the parent. It will create the value base if it does not exist.","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"className","desc":"","lua_type":"string"},{"name":"name","desc":"","lua_type":"string"},{"name":"defaultValue","desc":"","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"ValueBaseValue"}],"function_type":"static","source":{"line":44,"path":"src/valuebaseutils/src/Shared/ValueBaseValue.lua"}},{"name":"ObserveBrio","desc":"Observes the value base value. This will return a brio of the value base\\nunderneath the parent.","params":[{"name":"self","desc":"","lua_type":"ValueBaseValue"},{"name":"predicate","desc":"Optional callback","lua_type":"((any) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Observable<Brio<any>>"}],"function_type":"static","source":{"line":76,"path":"src/valuebaseutils/src/Shared/ValueBaseValue.lua"}},{"name":"Observe","desc":"Observes the value base value\'s","params":[{"name":"self","desc":"","lua_type":"ValueBaseValue"}],"returns":[{"desc":"","lua_type":"Observable<any>"}],"function_type":"static","source":{"line":88,"path":"src/valuebaseutils/src/Shared/ValueBaseValue.lua"}}],"properties":[],"types":[],"name":"ValueBaseValue","desc":"For when attributes don\'t work","source":{"line":6,"path":"src/valuebaseutils/src/Shared/ValueBaseValue.lua"}}')}}]);