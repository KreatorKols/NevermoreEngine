"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27431],{13991:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new ObservableSet","params":[],"returns":[{"desc":"","lua_type":"ObservableSet<T>"}],"function_type":"static","source":{"line":39,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"isObservableSet","desc":"Returns whether the value is an observable set","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":79,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"__iter","desc":"Allows iteration over the observable set","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"(T) -> ((T, nextIndex: any) -> ...any, T?)"}],"function_type":"static","source":{"line":88,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"ObserveItemsBrio","desc":"Observes all items in the set","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"Observable<Brio<T>>"}],"function_type":"static","source":{"line":96,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"ObserveContains","desc":"Observes the current value at a given index. This can be useful for observing\\nthe first entry, or matching stuff up to a given slot.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"},{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Observable<boolean>"}],"function_type":"static","source":{"line":150,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"Contains","desc":"Returns whether the set contains the item","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"},{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":185,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"GetCount","desc":"Gets the count of items in the set","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":195,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"ObserveCount","desc":"Observes the count of the set","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"static","source":{"line":205,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"Add","desc":"Adds the item to the set if it does not exists.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"},{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"Call to remove","lua_type":"callback"}],"function_type":"static","source":{"line":214,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"Remove","desc":"Removes the item from the set if it exists.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"},{"name":"item","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"True if removed"}],"function_type":"static","source":{"line":238,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"GetFirstItem","desc":"Gets an arbitrary item in the set (not guaranteed to be ordered)","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":260,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"GetList","desc":"Gets a list of all entries.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"static","source":{"line":269,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"GetSetCopy","desc":"Gets a copy of the set","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"{ [T]: true }"}],"function_type":"static","source":{"line":281,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"GetRawSet","desc":"Gets the raw set. Do not modify this set.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[{"desc":"","lua_type":"{ [T]: true }"}],"function_type":"static","source":{"line":289,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"Destroy","desc":"Cleans up the ObservableSet and sets the metatable to nil.","params":[{"name":"self","desc":"","lua_type":"ObservableSet<T>"}],"returns":[],"function_type":"static","source":{"line":296,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}}],"properties":[{"name":"ItemAdded","desc":"Fires when an item is added","lua_type":"Signal<T>","readonly":true,"source":{"line":54,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"ItemRemoved","desc":"Fires when an item is removed.","lua_type":"Signal<T>","readonly":true,"source":{"line":62,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}},{"name":"CountChanged","desc":"Fires when the count changes.","lua_type":"RBXScriptSignal","source":{"line":69,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}}],"types":[],"name":"ObservableSet","desc":"A list that can be observed for blend and other components","source":{"line":6,"path":"src/observablecollection/src/Shared/ObservableSet.lua"}}')}}]);