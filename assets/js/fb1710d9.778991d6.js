"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98001],{6194:e=>{e.exports=JSON.parse('{"functions":[{"name":"observeLastCharacterBrio","desc":"Observe a player\'s last character.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Model>>"}],"function_type":"static","source":{"line":26,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeCharacter","desc":"Observes a player\'s character property","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Model>"}],"function_type":"static","source":{"line":40,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeCharacterBrio","desc":"Observes a player\'s character property as a brio","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Model>>"}],"function_type":"static","source":{"line":50,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeIsOfLocalCharacter","desc":"Observes whether the instance is part of the local player\'s character","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"Observable<boolean>"}],"function_type":"static","source":{"line":62,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeIsOfLocalCharacterBrio","desc":"Observes whether the instance is part of the local player\'s character as a brio","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"Observable<Brio<boolean>>"}],"function_type":"static","source":{"line":92,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeLocalPlayerCharacter","desc":"Observes the local player\'s character","params":[],"returns":[{"desc":"","lua_type":"Observable<Model>"}],"function_type":"static","source":{"line":105,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeLastHumanoidBrio","desc":"Observe a player\'s last humanoid. Note that it may not be alive!","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Humanoid>>"}],"function_type":"static","source":{"line":123,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeLastAliveHumanoidBrio","desc":"Observes a player\'s last living humanoid.\\n\\n```lua\\nlocal Players = game:GetService(\\"Players\\")\\n\\nmaid:GiveTask(\\n\\tRxCharacterUtils.observeLastAliveHumanoidBrio(Players.LocalPlayer)\\n\\t\\t:Subscribe(function(humanoidBrio)\\n\\t\\t\\tlocal humanoid: Humanoid = humanoidBrio:GetValue()\\n\\t\\t\\tlocal humanoidMaid = humanoidBrio:ToMaid()\\n\\n\\t\\t\\tprint(\\"Humanoid:\\", humanoid)\\n\\n\\t\\t\\thumanoidMaid:GiveTask(function()\\n\\t\\t\\t\\t-- The maid cleans up on humanoid death, or when given player leaves the game.\\n\\t\\t\\t\\tprint(\\"Humanoid has been killed or destroyed!\\")\\n\\t\\t\\tend)\\n\\t\\tend)\\n)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Humanoid>>"}],"function_type":"static","source":{"line":185,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}}],"properties":[],"types":[],"name":"RxCharacterUtils","desc":"Utilities for observing characters and their humanoids.","source":{"line":6,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}}')}}]);