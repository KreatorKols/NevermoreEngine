"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25307],{18172:e=>{e.exports=JSON.parse('{"functions":[{"name":"Fire","desc":"Fires for the current key the given value","params":[{"name":"key","desc":"","lua_type":"TKey"},{"name":"...","desc":"","lua_type":"TEmit"}],"returns":[],"function_type":"method","source":{"line":28,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}},{"name":"HasSubscriptions","desc":"Returns true if subscription exists","params":[{"name":"key","desc":"","lua_type":"TKey"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":51,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}},{"name":"Complete","desc":"Completes the subscription","params":[{"name":"key","desc":"","lua_type":"TKey"}],"returns":[],"function_type":"method","source":{"line":60,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}},{"name":"Fail","desc":"Fails the subscription","params":[{"name":"key","desc":"","lua_type":"TKey"}],"returns":[],"function_type":"method","source":{"line":81,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}},{"name":"Observe","desc":"Observes for the key","params":[{"name":"key","desc":"","lua_type":"TKey"},{"name":"retrieveInitialValue","desc":"Optional","lua_type":"callback"}],"returns":[{"desc":"","lua_type":"Observable<TEmit>"}],"function_type":"method","source":{"line":103,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}},{"name":"Destroy","desc":"Completes all subscriptions and removes them from the list.","params":[],"returns":[],"function_type":"method","source":{"line":145,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}}],"properties":[],"types":[],"name":"ObservableSubscriptionTable","desc":"This allows the storage of subscriptions for keys, such that something\\ncan subscribe onto a key, and events can be invoked onto keys.","source":{"line":6,"path":"src/rx/src/Shared/ObservableSubscriptionTable.lua"}}')}}]);