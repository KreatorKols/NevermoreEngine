"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77205],{71166:e=>{e.exports=JSON.parse('{"functions":[{"name":"promiseNonChatStringForBroadcast","desc":"Returns a filtered string for broadcast. Tends to look like this:\\n\\n```lua\\nTextFilterUtils.promiseNonChatStringForBroadcast(text, player.UserId, Enum.TextFilterContext.PublicChat)\\n\\t:Then(function(filtered)\\n\\t\\tprint(filtered)\\n\\tend)\\n```\\n\\nThe two options for textFilterContext are `Enum.TextFilterContext.PublicChat` and `Enum.TextFilterContext.PrivateChat`.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"fromUserId","desc":"","lua_type":"number"},{"name":"textFilterContext","desc":"","lua_type":"TextFilterContext"}],"returns":[{"desc":"","lua_type":"Promise<string>"}],"function_type":"static","source":{"line":35,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"promiseLegacyChatFilter","desc":"Legacy filter broadcast using the `Chat:FilterStringForBroadcast` API call. It\'s recommended\\nyou use [TextFilterUtils.promiseNonChatStringForBroadcast] instead.","params":[{"name":"playerFrom","desc":"","lua_type":"Player"},{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Promise<string>"}],"function_type":"static","source":{"line":61,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"promiseNonChatStringForUserAsync","desc":"Returns a filtered string for a specific user to another user. This is preferable over broadcast if\\npossible.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"fromUserId","desc":"","lua_type":"number"},{"name":"toUserId","desc":"","lua_type":"number"},{"name":"textFilterContext","desc":"","lua_type":"TextFilterContext"}],"returns":[{"desc":"","lua_type":"Promise<string>"}],"function_type":"static","source":{"line":91,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"getNonChatStringForBroadcastAsync","desc":"Blocking call to get a non-chat string for broadcast. Wraps [TextService.FilterStringAsync].","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"fromUserId","desc":"","lua_type":"number"},{"name":"textFilterContext","desc":"","lua_type":"TextFilterContext"}],"returns":[{"desc":"","lua_type":"(string?, string?)"}],"function_type":"static","source":{"line":119,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"getNonChatStringForUserAsync","desc":"Blocking call to get a non-chat string for a user.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"fromUserId","desc":"","lua_type":"number"},{"name":"toUserId","desc":"","lua_type":"number"},{"name":"textFilterContext","desc":"","lua_type":"TextFilterContext"}],"returns":[{"desc":"","lua_type":"(string?, string?)"}],"function_type":"static","source":{"line":154,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"hasNonFilteredText","desc":"Returns true if there\'s non-filtered text or characters in the text","params":[{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":205,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"getProportionFiltered","desc":"Computes proportional text that is filtered ignoring whitespace.","params":[{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":224,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"countFilteredCharacters","desc":"Gets the number of filtered characters in the text string","params":[{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"filtered characters","lua_type":"number"},{"desc":"Unfiltered characters","lua_type":"number"},{"desc":"White space characters","lua_type":"number"}],"function_type":"static","source":{"line":242,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}},{"name":"addBackInNewLinesAndWhitespace","desc":"Adds in new lines and whitespace to the text","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"filteredText","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":267,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}}],"properties":[],"types":[],"name":"TextFilterUtils","desc":"Utility functions for filtering text wrapping [TextService] and legacy [Chat] API surfaces.","source":{"line":7,"path":"src/textfilterutils/src/Shared/TextFilterUtils.lua"}}')}}]);