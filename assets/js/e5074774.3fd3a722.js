"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27264],{55526:e=>{e.exports=JSON.parse('{"functions":[{"name":"SetDefaultPurchaseDecision","desc":"Sets the default purchase decision in case you want more control","params":[{"name":"productPurchaseDecision","desc":"","lua_type":"ProductPurchaseDecision"}],"returns":[],"function_type":"method","source":{"line":61,"path":"src/receiptprocessing/src/Server/ReceiptProcessingService.lua"}},{"name":"ObserveReceiptProcessedForPlayer","desc":"Observes receipt by player","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<ReceiptInfo>"}],"function_type":"method","source":{"line":73,"path":"src/receiptprocessing/src/Server/ReceiptProcessingService.lua"}},{"name":"ObserveReceiptProcessedForUserId","desc":"Observes receipt by userId","params":[{"name":"userId","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Observable<ReceiptInfo>"}],"function_type":"method","source":{"line":84,"path":"src/receiptprocessing/src/Server/ReceiptProcessingService.lua"}},{"name":"RegisterReceiptProcessor","desc":"Registers a new receipt processor. This works exactly like a normal receipt processor except it will also\\ntake a Promise as a result (of which an error).","params":[{"name":"processor","desc":"","lua_type":"(receiptInfo) -> ProductPurchaseDecision | Promise<ProductPurchaseDecision> | nil"},{"name":"priority","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"method","source":{"line":101,"path":"src/receiptprocessing/src/Server/ReceiptProcessingService.lua"}}],"properties":[],"types":[],"name":"ReceiptProcessingService","desc":"Centralize receipt processing within games since this is a constrained resource.","source":{"line":7,"path":"src/receiptprocessing/src/Server/ReceiptProcessingService.lua"}}')}}]);